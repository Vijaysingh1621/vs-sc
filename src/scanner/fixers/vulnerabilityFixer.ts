import { Vulnerability } from '../vulnerabilityScanner';

export class VulnerabilityFixer {
    async generateFix(vulnerability: Vulnerability): Promise<{ replacement: string; description: string } | null> {
        if (!vulnerability.fixable) {
            return null;
        }

        switch (vulnerability.type) {
            case 'hardcoded-credentials':
                return this.fixHardcodedCredentials(vulnerability);
            
            case 'weak-crypto':
                return this.fixWeakCrypto(vulnerability);
            
            case 'info-exposure':
                return this.fixInfoExposure(vulnerability);
            
            case 'incorrect-permissions':
                return this.fixIncorrectPermissions(vulnerability);
            
            case 'input-validation':
                return this.fixInputValidation(vulnerability);
            
            case 'crypto-failures':
                return this.fixCryptoFailures(vulnerability);
            
            case 'security-misconfiguration':
                return this.fixSecurityMisconfiguration(vulnerability);
            
            case 'logging-failures':
                return this.fixLoggingFailures(vulnerability);
            
            default:
                return null;
        }
    }

    private fixHardcodedCredentials(vuln: Vulnerability): { replacement: string; description: string } {
        const code = vuln.code;
        
        if (code.includes('password')) {
            return {
                replacement: code.replace(/password\s*=\s*["'][^"']*["']/, 'password = process.env.PASSWORD || ""'),
                description: 'Replaced hardcoded password with environment variable'
            };
        }
        
        if (code.includes('api_key')) {
            return {
                replacement: code.replace(/api_key\s*=\s*["'][^"']*["']/, 'api_key = process.env.API_KEY || ""'),
                description: 'Replaced hardcoded API key with environment variable'
            };
        }
        
        if (code.includes('secret')) {
            return {
                replacement: code.replace(/secret\s*=\s*["'][^"']*["']/, 'secret = process.env.SECRET || ""'),
                description: 'Replaced hardcoded secret with environment variable'
            };
        }

        return {
            replacement: code.replace(/=\s*["'][^"']*["']/, '= process.env.CREDENTIAL || ""'),
            description: 'Replaced hardcoded credential with environment variable'
        };
    }

    private fixWeakCrypto(vuln: Vulnerability): { replacement: string; description: string } {
        const code = vuln.code;
        
        if (code.includes('md5(')) {
            return {
                replacement: code.replace(/md5\s*\(/g, 'crypto.createHash("sha256").update('),
                description: 'Replaced MD5 with SHA-256 hashing'
            };
        }
        
        if (code.includes('sha1(')) {
            return {
                replacement: code.replace(/sha1\s*\(/g, 'crypto.createHash("sha256").update('),
                description: 'Replaced SHA-1 with SHA-256 hashing'
            };
        }

        return {
            replacement: code.replace(/(?:md5|sha1)\s*\(/g, 'crypto.createHash("sha256").update('),
            description: 'Replaced weak hash function with SHA-256'
        };
    }

    private fixInfoExposure(vuln: Vulnerability): { replacement: string; description: string } {
        const code = vuln.code;
        
        if (code.includes('console.log') && (code.includes('password') || code.includes('token'))) {
            return {
                replacement: code.replace(/console\.log\s*\([^)]*\)/, '// Removed sensitive data logging'),
                description: 'Removed logging of sensitive information'
            };
        }
        
        if (code.includes('debug = true')) {
            return {
                replacement: code.replace(/debug\s*=\s*true/, 'debug = process.env.NODE_ENV === "development"'),
                description: 'Made debug mode conditional on environment'
            };
        }

        return {
            replacement: '// ' + code,
            description: 'Commented out information exposure'
        };
    }

    private fixIncorrectPermissions(vuln: Vulnerability): { replacement: string; description: string } {
        const code = vuln.code;
        
        if (code.includes('chmod') && code.includes('0777')) {
            return {
                replacement: code.replace(/0777/g, '0644'),
                description: 'Changed file permissions from 777 to 644'
            };
        }

        return {
            replacement: code.replace(/0777/g, '0644'),
            description: 'Applied more restrictive file permissions'
        };
    }

    private fixInputValidation(vuln: Vulnerability): { replacement: string; description: string } {
        const code = vuln.code;
        
        if (code.includes('$_GET') || code.includes('$_POST')) {
            return {
                replacement: code.replace(/\$_(GET|POST|REQUEST)\[([^\]]+)\]/, 'filter_input(INPUT_$1, $2, FILTER_SANITIZE_STRING)'),
                description: 'Added input filtering and sanitization'
            };
        }

        return {
            replacement: `// TODO: Add input validation\n${code}`,
            description: 'Added reminder to implement input validation'
        };
    }

    private fixCryptoFailures(vuln: Vulnerability): { replacement: string; description: string } {
        const code = vuln.code;
        
        if (code.includes('md5') || code.includes('sha1')) {
            return {
                replacement: code.replace(/(?:md5|sha1)\s*\(/g, 'crypto.createHash("sha256").update('),
                description: 'Upgraded to stronger cryptographic hash function'
            };
        }

        return {
            replacement: code,
            description: 'Applied cryptographic improvements'
        };
    }

    private fixSecurityMisconfiguration(vuln: Vulnerability): { replacement: string; description: string } {
        const code = vuln.code;
        
        if (code.includes('cors') && code.includes('"*"')) {
            return {
                replacement: code.replace(/origin\s*:\s*["']\*["']/, 'origin: process.env.ALLOWED_ORIGINS?.split(",") || ["http://localhost:3000"]'),
                description: 'Restricted CORS to specific origins'
            };
        }

        return {
            replacement: code,
            description: 'Applied security configuration improvements'
        };
    }

    private fixLoggingFailures(vuln: Vulnerability): { replacement: string; description: string } {
        const code = vuln.code;
        
        if (code.includes('console.log') && (code.includes('password') || code.includes('token') || code.includes('secret'))) {
            return {
                replacement: code.replace(/console\.log\s*\([^)]*(?:password|token|secret)[^)]*\)/, '// Removed sensitive data from logs'),
                description: 'Removed sensitive information from logging'
            };
        }

        return {
            replacement: code,
            description: 'Improved logging security'
        };
    }
}