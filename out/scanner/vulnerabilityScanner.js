"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityScanner = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const owaspDetector_1 = require("./detectors/owaspDetector");
const sansDetector_1 = require("./detectors/sansDetector");
const languageDetector_1 = require("./detectors/languageDetector");
const vulnerabilityFixer_1 = require("./fixers/vulnerabilityFixer");
class VulnerabilityScanner {
    constructor() {
        this.owaspDetector = new owaspDetector_1.OwaspDetector();
        this.sansDetector = new sansDetector_1.SansDetector();
        this.languageDetector = new languageDetector_1.LanguageDetector();
        this.fixer = new vulnerabilityFixer_1.VulnerabilityFixer();
    }
    async scanWorkspace(workspacePath, token) {
        const results = [];
        const files = await this.getFilesToScan(workspacePath);
        for (let i = 0; i < files.length; i++) {
            if (token?.isCancellationRequested) {
                break;
            }
            const file = files[i];
            try {
                const content = fs.readFileSync(file, 'utf8');
                const result = await this.scanFile(file, content);
                if (result.vulnerabilities.length > 0) {
                    results.push(result);
                }
            }
            catch (error) {
                console.error(`Failed to scan ${file}:`, error);
            }
        }
        return results;
    }
    async scanFile(filePath, content) {
        const startTime = Date.now();
        const language = this.languageDetector.detectLanguage(filePath, content);
        const vulnerabilities = [];
        // Scan for OWASP Top 10 vulnerabilities
        const owaspVulns = await this.owaspDetector.detect(filePath, content, language);
        vulnerabilities.push(...owaspVulns);
        // Scan for SANS Top 25 vulnerabilities
        const sansVulns = await this.sansDetector.detect(filePath, content, language);
        vulnerabilities.push(...sansVulns);
        // Remove duplicates and sort by severity
        const uniqueVulns = this.deduplicateVulnerabilities(vulnerabilities);
        const sortedVulns = this.sortBySeverity(uniqueVulns);
        return {
            file: filePath,
            language,
            vulnerabilities: sortedVulns,
            scanTime: Date.now() - startTime
        };
    }
    async generateFix(vulnerability) {
        return this.fixer.generateFix(vulnerability);
    }
    async getFilesToScan(workspacePath) {
        const files = [];
        const supportedExtensions = [
            '.js', '.ts', '.jsx', '.tsx', '.vue', '.svelte',
            '.py', '.java', '.c', '.cpp', '.cs', '.php',
            '.rb', '.go', '.rs', '.kt', '.swift', '.scala',
            '.sql', '.yaml', '.yml', '.json', '.xml',
            '.html', '.htm', '.css', '.scss', '.sass'
        ];
        const scanDirectory = (dir) => {
            const entries = fs.readdirSync(dir, { withFileTypes: true });
            for (const entry of entries) {
                const fullPath = path.join(dir, entry.name);
                if (entry.isDirectory()) {
                    // Skip common directories that don't need scanning
                    if (!['node_modules', '.git', 'dist', 'build', '.next', 'coverage'].includes(entry.name)) {
                        scanDirectory(fullPath);
                    }
                }
                else if (entry.isFile()) {
                    const ext = path.extname(entry.name).toLowerCase();
                    if (supportedExtensions.includes(ext)) {
                        files.push(fullPath);
                    }
                }
            }
        };
        scanDirectory(workspacePath);
        return files;
    }
    deduplicateVulnerabilities(vulnerabilities) {
        const seen = new Set();
        return vulnerabilities.filter(vuln => {
            const key = `${vuln.file}:${vuln.line}:${vuln.column}:${vuln.type}`;
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }
    sortBySeverity(vulnerabilities) {
        const severityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };
        return vulnerabilities.sort((a, b) => severityOrder[a.severity] - severityOrder[b.severity]);
    }
}
exports.VulnerabilityScanner = VulnerabilityScanner;
//# sourceMappingURL=vulnerabilityScanner.js.map